$transition-duration: 500ms;

.carousel {
	position: relative;

	ul {
		bottom: -35px;
		left: 0;
		width: 100%;
		position: absolute;
		text-align: center;

		li {
			margin: 0 1px;
			padding: 0;
			text-indent: -9999px;
			@include inline-block;
			width: 10px;
			height: 10px;
			border: 2px solid #00aeef;
			@include border-radius(5px);
			cursor: pointer;
			@include transition(all $transition-duration $ease-out-expo);

			&:hover {
				background: #fff;
			}

			&.active {
				background: #00aeef;
			}
		}
	}
}

#work.all .carousel {
	ol li {
		position: static;
		@include experimental(transform, translateZ(0));
	}

	ul {
		display: none;
	}
}

.no-csstransitions, .no-csstransforms3d {
	.carousel {
		ol {
			position: relative;
			min-height: 400px;
			pointer-events: none;

			li {
				margin-top: 10px;
				top: 0;
				left: 0;
				position: absolute;
				opacity: 0;
			}

			@for $i from 1 through 5 {
				&.position-#{$i} li:nth-child(#{$i}) {
					opacity: 1;
					pointer-events: auto;
				}
			}
		}
	}
}

.csstransitions.csstransforms3d {
	$translate-z-increment: 300;

	.carousel {
		position: relative;
		@include experimental(perspective, 800);
		@include experimental(perspective-origin, center bottom);

		ol, li, figure, img {
			@include experimental(transform, translate3d(0, 0, 0));
		}

		figcaption, figcaption * {
			@include experimental(transform, none);
		}

		ol, li {
			@include transform-origin(50%, 100%); 

			-webkit-transition-property: all, opacity;
			-moz-transition-property: all, opacity;

			-webkit-transition-duration: $transition-duration, ($transition-duration / 3);
			-moz-transition-duration: $transition-duration, ($transition-duration / 3);

			-webkit-transition-timing-function: $ease-out-expo, $linear;
			-moz-transition-timing-function: $ease-out-expo, $linear;

			@include experimental(transform-style, preserve-3d);
		}

		ol {
			position: relative;
			@include translateZ(0);
			min-height: 400px;
			pointer-events: none;

			li {
				margin-top: 10px;
				top: 0;
				left: 0;
				position: absolute;
				opacity: 1;
				pointer-events: auto;
			}

			$z: 0px;

			@for $i from 1 through 5 {
				&.position-#{$i} {
					@include experimental(transform, translateZ(#{$z}));

					li:not(:nth-child(#{$i})) {
						pointer-events: none;
						opacity: 0;
					}
				}

				li:nth-child(#{$i}) {
					@include experimental(transform, translateZ(-(#{$z})));
				}

				$z: $z + $translate-z-increment;
			}
		}
	}	
}
